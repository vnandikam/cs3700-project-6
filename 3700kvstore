#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os
from enum import Enum

class State(Enum):
    LEADER  = 0
    CANDIDATE = 1
    FOLLOWER = 2

BROADCAST = "FFFF"
# STATE = {'candidate', 'follower', 'leader'}

class Replica:
    def __init__(self, port, id, others):
        self.database = {}
        self.port = port
        self.id = id
        self.others = others
        self.state = State.FOLLOWER
    
        if id == '0000':
            self.state = State.LEADER

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)


    def send(self, message):
        print('Replica ' + str(self.id) + ' sent ' + str(message))
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def run(self):
        while True:
            data, addr = self.socket.recvfrom(65535)
            msg = json.loads(data.decode('utf-8'))
            print("Received message '%s'" % (msg,), flush=True)            
            
            if msg['type'] == 'put':
                self.database[msg['key']] = msg['value']
                mid = msg['MID']
                response = {"src": self.id, "dst": msg['src'], "leader": "FFFF", "type": "fail", "MID": mid}
                self.send(response)
            elif msg['type'] == 'get':
                value = self.database[msg['key']]
                response = {"src": self.id, "dst": msg['src'], "leader": "FFFF", "type": "fail", "MID": mid}
                self.send(response)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
