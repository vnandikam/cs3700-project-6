#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random
from enum import Enum

class State(Enum):
    LEADER  = 0
    CANDIDATE = 1
    FOLLOWER = 2

BROADCAST = "FFFF"
STANDARD_TIMEOUT = 0.15


# ADD REPLICA LOGIC FOR GETTING AN APPENDRPC MESSAGE
    # IF IT IS SUCCESSFUL: THEN ADD TO LOG AND MAYBE DATABASE (POTENTAILLY OVERWRITE ANY ENTRIES IN LOG/DATABASE)
    # IF NOT: SEND APPEND FAIL
# IF LEADER GETS APPEND-FAIL: MAKE SURE WE SEND THE WHOLE LOG AFTER THE TERM NUMBER

class Replica:
    def __init__(self, port, id, others):
        self.database = {}
        self.port = port
        self.id = id
        self.others = others
        self.state = State.FOLLOWER
        self.curr_leader = 'FFFF'
        self.curr_term_number = 0
        self.log = {}
        self.votes = 0
        self.looking_for_votes = False
        self.last_heartbeat = time.time()
        self.sent_vote_for_term = False
        self.curr_log_idx = 0
        self.leader_buff = {}
        self.follower_buff = []
        self.majority = (math.floor(len(self.others)/2)) + 1

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)


    def send(self, message, to_print=True):
        if to_print:
            print('Replica ' + str(self.id) + ' sent ' + str(message))
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    # empty append entry message for a list of followers
    def send_heartbeat(self, followers):
        for follower in followers:
            msg = {'src': self.id, 'dst': follower, 
                    'leader': self.id, 
                    "type": "append-entries", 
                    'term': self.curr_term_number,
                    'entries': []}
            self.send(msg, False)

    # send either append entry message to followers or a heartbeat
    # TODO: send out one AppendEntry message to each follower with everything they need
    def leader_timeout_protocol(self):
        followers = self.others.copy()
        # TODO: change to only followers
        self.send_heartbeat(self.others)
        self.last_heartbeat = time.time()

    # 
    def timeout(self, timeout):
        if time.time() - self.last_heartbeat > timeout:
            if self.state == State.LEADER:
                self.leader_timeout_protocol()
            else:
                self.state = State.CANDIDATE
                self.leader_buff = {}
                self.follower_buff = []
                self.curr_leader = 'FFFF'
                self.curr_term_number += 1
                msg = {'src': self.id, 'dst': 'FFFF', 
                        'leader': 'FFFF', 
                        "type": "request_rpc", 
                        'log-length': len(self.database)}
                self.votes += 1
                self.send(msg)
                self.looking_for_votes = True

    def send_append_entry(self, dst, log_index):
        term_number = self.log[log_index]['term']
        prev_term_number = -1
        if (log_index - 1) in self.log.keys():
            prev_term_number = self.log[log_index - 1]['term']
            
        append_msg = {'src': self.id, 'dst': dst,
                      'leader': self.id, 
                      'type': "append-entries", 
                      'leader_commit': log_index,
                      'term': term_number,
                      'prev_log_index': log_index - 1,
                      'prev_log_term': prev_term_number,
                      'entries': []
                      }
        
        for leader_commit in self.log.keys():
            if leader_commit >= log_index:
                is_committed = True if self.log[leader_commit]['key'] in self.database.keys() else False

                append_msg['entries'].append({
                    'leader_commit': leader_commit,
                    'term': self.log[leader_commit]['term'],
                    'key': self.log[leader_commit]['key'],
                    'value': self.log[leader_commit]['value'],
                    'commit': is_committed,
                    'mid': self.log[leader_commit]['mid'],
                    'dst': self.log[leader_commit]['dst']
                })
        
        self.send(append_msg)

    def receive_append_entry(self, msg):
        if msg['prev_log_index'] == 0 or (msg['prev_log_index'] in self.log.keys() and self.log[msg['prev_log_index']]['term'] == msg['prev_log_term']):
            print('APPEND SUCCESS')
            for log_id in self.log.copy().keys():
                if log_id > msg['prev_log_index']:
                    if self.log[log_id]['key'] in self.database.keys():
                        self.database.pop(self.log[log_id]['key'])
                    self.log.pop(log_id)
                    

            for entry in msg['entries']:
                self.curr_log_idx = max(self.curr_log_idx, entry['leader_commit'])
                curr_log = {
                    'term':  entry['term'],
                    'mid': entry['mid'],
                    'dst': entry['dst'],
                    'leader_commit': entry['leader_commit'],
                    'key': entry['key'],
                    'value': entry['value']
                }
                self.log[self.curr_log_idx] = curr_log
                if entry['commit']:
                    self.database[entry['key']] = entry['value']


            success_msg = {
                'src': self.id,
                'dst': msg['src'],
                'leader': self.curr_leader,
                'log_id': msg['leader_commit'],
                'term': msg['term'],
                'type': 'append-success'
            }
            self.send(success_msg)
        else:
            print('APPEND FAIL')
            # print(self.log)
            fail_msg = {
                'src': self.id,
                'dst': msg['src'],
                'leader': self.curr_leader,
                'log_id': msg['prev_log_index'],
                'term': msg['prev_log_term'],
                'type': 'append-fail'
            }
            self.send(fail_msg)


    # recieved a heartbeat from leader and reset timers
    def recieve_heartbeat(self, msg):
        self.last_heartbeat = time.time()
        self.curr_leader = msg['leader']
        self.looking_for_votes = False
        self.sent_vote_for_term = False
        self.votes = 0
        self.state = State.FOLLOWER
        self.leader_buff = {}
       # print("Received message '%s'" % (msg,), flush=True)

        if len(msg['entries']) > 0:
            self.receive_append_entry(msg)

    # 
    def send_vote(self, msg):
        print('CANDIDATE: ' + str(self.id) + ' voted for ' + str(msg['src']))
        self.state = State.CANDIDATE
        self.curr_leader = 'FFFF'
        msg = {'src': self.id, 'dst': msg['src'], 
                'leader': 'FFFF',
                "type": "vote"}
        # print('Replica ' + str(self.id) + ' sent ' + str(msg))
        self.send(msg)
        self.last_heartbeat = time.time()
        self.sent_vote_for_term = True
        print("Received message '%s'" % (msg,), flush=True)
    
    def receive_vote(self, msg):
        self.votes += 1
        if self.votes >= self.majority:
            msg = {'src': self.id, 'dst': 'FFFF', 
                    'leader': self.id,
                    "type": "append-entries", 
                    'term': self.curr_term_number,
                    'entries': []}
            # print('Replica ' + str(self.id) + ' sent ' + str(msg))
            self.send(msg)
            self.looking_for_votes = False
            self.votes = 0
            self.curr_leader = self.id
            self.state = State.LEADER
            self.leader_buff = {}
            self.follower_buff = []
            print("Received message '%s'" % (msg,), flush=True)

    # called when there is a get or put
    def database_transaction(self, msg):
        mid = msg['MID']
        if self.state == State.LEADER:
            if msg['type'] == 'put':
                # self.database[msg['key']] = msg['value']
                # response = {"src": self.id, "dst": msg['src'], "leader": self.curr_leader, "type": "ok", "MID": mid}
                # self.send(response)
                self.curr_log_idx += 1
                curr_log = {
                    'term':  self.curr_term_number,
                    'mid': mid,
                    'dst': msg['src'],
                    'leader_commit': self.curr_log_idx,
                    'key': msg['key'],
                    'value': msg['value']
                }
                self.log[self.curr_log_idx] = curr_log

                buffer = {
                    'log_id': self.curr_log_idx,
                    'term_id': self.curr_term_number,
                    'others': self.others.copy()
                }
                self.leader_buff[self.curr_log_idx] = buffer

                append_msg = self.send_append_entry(BROADCAST, self.curr_log_idx)

            # if it's a get, look inside database
            elif msg['type'] == 'get':
                value = self.database.get(msg['key'], '')
                response = {"src": self.id, "dst": msg['src'], "leader": self.curr_leader, "type": "ok", "MID": mid, 'value': value}
                # print('Replica ' + str(self.id) + ' sent ' + str(response))
                self.send(response)
        
        # send fail because there is no leader
        elif self.state == State.CANDIDATE:
            response = {"src": self.id, "dst": msg['src'], "leader": self.curr_leader, "type": "redirect", "MID": mid}
            # print('Replica ' + str(self.id) + ' sent ' + str(response))
            self.send(response)
        # redirect to leader
        elif self.state == State.FOLLOWER:
            response = {"src": self.id, "dst": msg['src'], "leader": self.curr_leader, "type": "redirect", "MID": mid}
            # print('Replica ' + str(self.id) + ' sent ' + str(response))
            self.send(response)


    def successful_append_yay(self, msg):
        buffer = self.leader_buff[msg['log_id']]
        buff_followers = buffer['others']
        buff_followers.remove(msg['src'])
        # print('LOG ID: ' + str(msg['log_id']) + ' SIZE OF BUFFER: ' + str(len(buff_followers)))
        len_buffer_followers = len(buff_followers)

        if len_buffer_followers <= (len(self.others) - self.majority):
            print('HIT MAJORITY ' + str(len_buffer_followers))
            if self.log[msg['log_id']]['key'] not in self.database.keys(): # not committed yet
                self.database[self.log[msg['log_id']]['key']] = self.log[msg['log_id']]['value']
                response = {"src": self.id, "dst": self.log[msg['log_id']]['dst'], "leader": self.curr_leader, "type": "ok", "MID": self.log[msg['log_id']]['mid']}
                self.send(response)
                commit_msg = {"src": self.id, "dst": BROADCAST, "leader": self.curr_leader, "type": "commit", 'leader_commit': msg['log_id'], 'term': self.log[msg['log_id']]['term']}
                self.send(commit_msg)
        if len_buffer_followers == 0:
            self.leader_buff.pop(msg['log_id'])


    def run(self):
        self.last_heartbeat = time.time()
        while True:

            # set timeout
            timeout = STANDARD_TIMEOUT / 2
            if self.state != State.LEADER:
                timeout = (random.random() + 1) * STANDARD_TIMEOUT

            self.timeout(timeout)

            sock = select.select([self.socket], [], [], 0.003)[0]
            for conn in sock:
                data, addr = conn.recvfrom(65535)
                msg = json.loads(data.decode('utf-8'))  
                print('Replica + ' + str(self.id) + ' received: ' + str(msg))

                # receving a reply to an append entry message
                if self.state == State.LEADER:
                    if msg['type'] == 'append-success':
                        self.successful_append_yay(msg)

                    elif msg['type'] == 'append-fail':
                        self.send_append_entry(msg['src'], msg['log_id'])
                        
                ### MESSAGE OPTIONS ###
                if msg['type'] == 'append-entries': # receive heartbeat
                    self.recieve_heartbeat(msg)

                elif msg['type'] == 'commit':
                    if msg['leader_commit'] in self.log.keys():
                        self.database[self.log[msg['leader_commit']]['key']] = self.log[msg['leader_commit']]['value']
                
                elif msg['type'] == 'request_rpc' and not self.sent_vote_for_term: # vote for rpc
                    self.send_vote(msg)
                
                elif msg['type'] == 'vote':
                    self.receive_vote(msg)

                elif msg['type'] == 'put' or msg['type'] == 'get':
                    self.database_transaction(msg)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()