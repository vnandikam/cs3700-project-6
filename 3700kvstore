#!/usr/bin/env python3

import argparse, socket, time, json, random, select, struct, sys, math, os
from enum import Enum

class State(Enum):
    LEADER  = 0
    CANDIDATE = 1
    FOLLOWER = 2


BROADCAST = "FFFF"
STANDARD_TIMEOUT = 200

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.replica_timeout = 0
        self.leader_timeout = 0

        self.commit_index = -1
        self.term = 0
        self.state = State.FOLLOWER
        self.most_recent_commit = -1

        self.leader = BROADCAST
        self.votes = 0
        self.voted_leader = ''
        self.replicas_not_voted = self.others.copy()
        self.log = []
        self.database = {}

        self.log_buffer = {}

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))
      
    def reset_replica_timeout(self):
        self.replica_timeout = time.time() + random.randint(STANDARD_TIMEOUT, STANDARD_TIMEOUT*2) / 1000.0

    def send_append_response(self, dst, match_response, idx_diff, term_diff, entry_indices):
        append_msg = {'src': self.id, 
                      'dst': dst,
                      'leader': self.id, 
                      'type': 'append-response', 
                      'term': self.term,
                      'success': match_response,
                      'index-difference': idx_diff,
                      'term-difference': term_diff,
                      'entries': entry_indices,
                      'commit_index': self.commit_index
                      }
        
        self.send(append_msg)

# TODO: check logic
    def update_log(self, match_index, match_term, entries):

        prev_match = False
        idx_diff = -1
        term_diff = -1

        if len(self.log) < match_index:
            idx_diff = len(self.log) - 1
            term_diff = self.log[-1]['term']
        elif len(self.log) >= match_index:  
            entry = self.log[match_index] 
            if entry['term'] == match_term:
                prev_match = True
                same_log_as_leader = self.log
                if len(self.log) > match_index:
                    same_log_as_leader = self.log[:match_index + 1]
                self.log = same_log_as_leader + entries
            else:
                term_diff = match_term
                for index in range(0, len(self.log)):
                    entry = self.log[index]

                    if (entry["term"] == match_term):
                        idx_diff = index
        
        return prev_match, idx_diff, term_diff


    def recv_append_entry(self, msg):

        entry_indices = [entry['log-index'] for entry in msg['entries']]

        if msg['term'] < self.term:
            self.send_append_response(msg['src'], False, -1, -1, entry_indices)
        else:
            self.reset_replica_timeout()
            self.leader = msg["src"]
            self.state = State.FOLLOWER
            self.term = msg['term']

            if len(msg['entries']) == 0 or len(self.log) == 0:
                self.send_append_response(msg['src'], True, -1, -1, entry_indices)
                self.log += msg['entries']

            else:
                prev_match, idx_diff, term_diff = self.update_log(msg['prev_log_index'], msg['prev_log_term'], msg['entries'])
                self.send_append_response(msg['src'], prev_match, idx_diff, term_diff, entry_indices)
                if prev_match and msg['commit_index'] > self.commit_index:
                    
                    self.commit_index = min(msg['commit_index'], len(self.log) - 1)
                    print('NEW COMMIT INDEX' + str(self.commit_index))

    def recv_append_response(self, msg):

        if msg['success']:
            if len(msg['entries']) == 0:
                return
            for entry in msg['entries']:
                self.log[entry]['follower-commits'] += 1
                if self.log[entry]['log-index'] >= self.commit_index:
                    self.commit_index += 1
            self.log_buffer[msg['src']] = msg["entries"][-1] + 1
        else:
            diff_entry = self.log[msg['index-difference']]

            if (diff_entry['term'] == msg['term-difference']):
                self.log_buffer[msg['src']] = msg['index-difference']
            else:
                prev_term_idx = 0
                for index in range(0, len(self.log)):
                    entry = self.log[index]

                    if (entry["term"] == (msg['term-difference'] - 1)):
                        prev_term_idx = index
                self.log_buffer[msg['src']] = prev_term_idx


    def send_heartbeat(self, dst, entries, prev_idx, prev_term):
        append_msg = {'src': self.id, 
                      'dst': dst,
                      'leader': self.id, 
                      'type': "append-entries", 
                      'leader_commit': len(self.log),
                      'term': self.term,
                      'prev_log_index': prev_idx,
                      'prev_log_term': prev_term,
                      'entries': entries,
                      'commit_index': self.commit_index
                      }
        
        self.send(append_msg)

    def leader_heartbeat(self):

        for follower, follower_index in self.log_buffer.items():
            if follower_index == len(self.log):
                self.send_heartbeat(follower, [], -1, -1)
            else:
                ## if not empty, send the rest
                entries = self.log[follower_index:]
                prev_entry = self.log[follower_index - 1]
                prev_term = prev_entry['term']
                self.send_heartbeat(follower, entries, follower_index - 1, prev_term)
            
        self.leader_timeout = time.time() + (STANDARD_TIMEOUT / 2000.0)

    def start_election(self):
        self.leader = self.id
        self.state = State.CANDIDATE
        self.term += 1
        self.votes += 1
        self.replicas_not_voted = self.others.copy()
        #TODO: keep track of replicas who voted to make sure there are no duplicates
        # self.terms_voted_for.add(self.curr_term_number)

        self.reset_replica_timeout()
        self.leader_timeout = time.time() + STANDARD_TIMEOUT/2000.0

        msg = {'src': self.id, 'dst': 'FFFF', 
            'leader': self.id,
            "type": "request_rpc",
            'term': self.term,
            # TODO: include the term of the last log ? and use that to compare to replica's term instead
            'log-length': len(self.log)}
        
        self.send(msg)

    def persist_request_rpc(self):
        for replica in self.replicas_not_voted:
            msg = {'src': self.id, 'dst': replica, 
                    'leader': self.id,
                    "type": "request_rpc",
                    'term': self.term,
                    # TODO: include the term of the last log ? and use that to compare to replica's term instead
                    'log-length': self.curr_log_idx}
            self.send(msg)

    def process_incoming_message(self, msg):
        if msg['type'] == 'request_rpc':
            self.receive_request_rpc(msg)
        elif msg['type'] == 'vote':
            if self.state == State.CANDIDATE and msg['src'] in self.replicas_not_voted:
                self.replicas_not_voted.remove(msg['src'])
                self.receive_vote(msg)
        elif msg['type'] == 'append-entries':
            self.recv_append_entry(msg)
        elif msg['type'] == 'append-response':
            if self.state == State.LEADER:
                self.recv_append_response(msg)
        elif msg['type'] == 'put':
            self.recv_put(msg)
        elif msg['type'] == 'get':
            self.recv_get(msg)

    def recv_put(self, msg):
        if self.state == State.LEADER:
            log_entry = {
                'term': self.term,
                'MID': msg['MID'],
                'key': msg['key'],
                'value': msg['value'],
                'client': msg['src'],
                'type': 'put',
                'log-index': len(self.log),
                'follower-commits': 1 
            }
            self.log.append(log_entry)
        else:
            self.redirect_msg(msg)

    def recv_get(self, msg):
        if self.state == State.LEADER:
            value = self.database.get(msg['key'], '')
            response = {"src": self.id, "dst": msg['src'], "leader": self.leader, "type": "ok", "MID": msg['MID'], 'value': value}
            self.send(response)
        # elif self.state == State.CANDIDATE:
        #     self.fail_msg(msg)
        else:
            self.redirect_msg(msg)

    def fail_msg(self, msg):
        response = {"src": self.id, "dst": msg['src'], "leader": self.leader, "type": "fail", "MID": msg['MID']}
        self.send(response)

    def redirect_msg(self, msg):
        response = {"src": self.id, "dst": msg['src'], "leader": self.leader, "type": "redirect", "MID": msg['MID']}
        self.send(response)

    def complete_put_action(self, msg):
        self.database[msg['key']] = msg['value']
        if self.state == State.LEADER:
            response = {"src": self.id, "dst": msg['client'], "leader": self.leader, "type": "ok", "MID": msg['MID']}
            self.send(response)

    def receive_vote(self, msg):
        if msg['should_vote']:
            self.votes += 1
        else:
            if msg['term'] > self.term:
                self.term = msg['term']

        if self.votes >= ((len(self.others) + 1) / 2.0):
            self.state = State.LEADER
            self.leader = self.id
            if time.time() >= self.leader_timeout:
                self.leader_heartbeat()
            for follower in self.others:
                self.log_buffer[follower] = len(self.log)
            
    def receive_request_rpc(self, msg):
        should_vote = None

        if msg['term'] < self.term:
            should_vote = False
        elif msg['term'] == self.term:
            self.reset_replica_timeout()
            should_vote = msg['src'] == self.voted_leader

        else:
            self.term = max(self.term, msg['term'])
            if len(self.log) <= msg['log-length']:
                # TODO: check previous log term with candidates previous term
                self.leader = msg['src']
                self.voted_leader = msg['src']
                self.reset_replica_timeout()
                should_vote = True
            else:
                should_vote = False

            if self.state != State.CANDIDATE:
                self.state = State.FOLLOWER

        vote_msg = {'src': self.id, 'dst': msg['src'], 
            'leader': self.leader,
            "type": "vote",
            'should_vote': should_vote,
            'term': self.term}
        
        self.send(vote_msg)

    #NOTE: updates the database until the given commit index 
    def housekeeping(self):
        while(self.most_recent_commit < self.commit_index - 1):
            
            self.most_recent_commit +=1
            self.complete_put_action(self.log[self.most_recent_commit])
            
    def run(self):
        # TODO: CHANGE TO OUR METHOD OF TIMEOUT
        # TODO: see if we can consolidate the two timeouts into one
        self.reset_replica_timeout()

        while True:
            connections = select.select([self.socket], [], [], 0.01)[0]
            for conn in connections:
                data, addr = self.socket.recvfrom(65535)
                msg = json.loads(data.decode('utf-8'))
                print("Received message '%s'" % (msg,), flush=True)

                self.process_incoming_message(msg)
            
            if self.state == State.LEADER:
                if time.time() >= self.leader_timeout:
                    self.leader_heartbeat()
            else:
                if time.time() >= self.replica_timeout:
                    self.start_election()

            if self.state == State.CANDIDATE:
                if time.time() >= self.replica_timeout:
                    self.persist_request_rpc()
            
            self.housekeeping()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
